{"ast":null,"code":"// Generated by LiveScript 1.4.0\n(function () {\n  var ref$,\n      all,\n      any,\n      concatMap,\n      each,\n      filter,\n      find,\n      fold,\n      isType,\n      keys,\n      map,\n      Obj,\n      objToPairs,\n      partition,\n      reverse,\n      sortBy,\n      batch,\n      clamp,\n      findAll,\n      get,\n      isEmptyObject,\n      isEqualToObject,\n      partitionString,\n      mappend,\n      rextend,\n      set,\n      transpose,\n      unwrap,\n      slice$ = [].slice,\n      toString$ = {}.toString;\n  ref$ = require('prelude-ls'), all = ref$.all, any = ref$.any, concatMap = ref$.concatMap, each = ref$.each, filter = ref$.filter, find = ref$.find, fold = ref$.fold, isType = ref$.isType, keys = ref$.keys, map = ref$.map, Obj = ref$.Obj, objToPairs = ref$.objToPairs, partition = ref$.partition, reverse = ref$.reverse, sortBy = ref$.sortBy;\n  batch = curry$(function (size, items) {\n    return fold(function (acc, item) {\n      var lastBatch;\n      lastBatch = acc[acc.length - 1];\n\n      if (lastBatch.length < size) {\n        lastBatch.push(item);\n        return acc;\n      } else {\n        return [].concat(acc, [[item]]);\n      }\n    }, [[]])(items);\n  });\n  clamp = curry$(function (n, min, max) {\n    return Math.max(min, Math.min(max, n));\n  });\n  findAll = curry$(function (text, search, offset) {\n    var index;\n    index = text.substr(offset).indexOf(search);\n\n    if (index === -1) {\n      return [];\n    } else {\n      return [offset + index].concat(findAll(text, search, offset + index + search.length));\n    }\n  });\n  get = curry$(function (object, arg$) {\n    var p, ps, ref$;\n    p = arg$[0], ps = slice$.call(arg$, 1);\n\n    if (ps.length === 0) {\n      return (ref$ = object[p]) != null ? ref$ : null;\n    } else {\n      if (typeof object[p] === 'undefined') {\n        return null;\n      } else {\n        return get(object[p], ps);\n      }\n    }\n  });\n\n  isEmptyObject = function isEmptyObject(object) {\n    return 0 === function (it) {\n      return it.length;\n    }(keys(Obj.filter(function (it) {\n      return !!it;\n    })(object)));\n  };\n\n  isEqualToObject = curry$(function (o1, o2) {\n    if (toString$.call(o1).slice(8, -1) !== toString$.call(o2).slice(8, -1)) {\n      return false;\n    }\n\n    if (any(function (it) {\n      return isType(it, o1);\n    })(['Boolean', 'Number', 'String', 'undefined'])) {\n      return o1 === o2;\n    }\n\n    if (toString$.call(o1).slice(8, -1) === 'Array') {\n      if (o1.length !== o2.length) {\n        return false;\n      }\n\n      return all(function (index) {\n        return isEqualToObject(o1[index], o2[index]);\n      })(function () {\n        var i$,\n            to$,\n            results$ = [];\n\n        for (i$ = 0, to$ = o1.length; i$ < to$; ++i$) {\n          results$.push(i$);\n        }\n\n        return results$;\n      }());\n    } else {\n      if (keys(o1).length !== keys(o2).length) {\n        return false;\n      }\n\n      return all(function (key) {\n        return isEqualToObject(o1[key], o2[key]);\n      })(keys(o1));\n    }\n  });\n  partitionString = curry$(function (text, search) {\n    var indices, first, x, last, high, low;\n\n    if (search.length === 0) {\n      return [[0, text.length]];\n    }\n\n    indices = findAll(text, search, 0), first = indices[0], x = indices[indices.length - 1];\n\n    if (indices.length === 0) {\n      return [];\n    }\n\n    last = x + search.length;\n    high = map(function (it) {\n      return [it, it + search.length, true];\n    })(indices);\n    low = map(function (i) {\n      return [high[i][1], high[i + 1][0], false];\n    })(function () {\n      var i$,\n          to$,\n          results$ = [];\n\n      for (i$ = 0, to$ = high.length - 1; i$ < to$; ++i$) {\n        results$.push(i$);\n      }\n\n      return results$;\n    }());\n    return (first === 0 ? [] : [[0, first, false]]).concat(sortBy(function (it) {\n      return it[0];\n    })(high.concat(low)), last === text.length ? [] : [[last, text.length, false]]);\n  });\n  mappend = curry$(function (object, path, nextValue, combinator) {\n    var current;\n    current = get(object, path);\n    return set(object, path, !!current ? combinator(current, nextValue) : nextValue);\n  });\n  rextend = curry$(function (a, b) {\n    var btype, bkeys;\n    btype = toString$.call(b).slice(8, -1);\n\n    if (any(function (it) {\n      return it === btype;\n    }, ['Boolean', 'Number', 'String', 'Function'])) {\n      return b;\n    }\n\n    if (a === null || 'Undefined' === toString$.call(a).slice(8, -1)) {\n      return b;\n    }\n\n    bkeys = Obj.keys(b);\n\n    if (bkeys.length === 0) {\n      return a;\n    }\n\n    each(function (key) {\n      return a[key] = rextend(Obj.keys(a[key]).length > 0 ? import$({}, a[key]) : a[key], b[key]);\n    })(bkeys);\n    return a;\n  });\n  set = curry$(function (object, arg$, value) {\n    var p, ps, ref$;\n    p = arg$[0], ps = slice$.call(arg$, 1);\n\n    if (ps.length > 0) {\n      object[p] = (ref$ = object[p]) != null ? ref$ : {};\n      return set(object[p], ps, value);\n    } else {\n      object[p] = value;\n      return object;\n    }\n  });\n\n  transpose = function transpose(arr) {\n    return map(function (column) {\n      return map(function (row) {\n        return row[column];\n      })(arr);\n    })(keys(arr[0]));\n  };\n\n  unwrap = curry$(function (f, depth, object) {\n    var r;\n    r = curry$(function (f, ks, i, j, object) {\n      return concatMap(function (arg$) {\n        var k, v;\n        k = arg$[0], v = arg$[1];\n\n        if (i < j) {\n          return r(f, ks.concat(k), i + 1, j, v);\n        } else {\n          return f(ks.concat(k), v);\n        }\n      })(objToPairs(object));\n    });\n    return r(f, [], 0, depth, object);\n  });\n  module.exports = {\n    batch: batch,\n    clamp: clamp,\n    findAll: findAll,\n    get: get,\n    isEmptyObject: isEmptyObject,\n    isEqualToObject: isEqualToObject,\n    mappend: mappend,\n    partitionString: partitionString,\n    rextend: rextend,\n    set: set,\n    transpose: transpose,\n    unwrap: unwrap\n  };\n\n  function curry$(f, bound) {\n    var context,\n        _curry = function _curry(args) {\n      return f.length > 1 ? function () {\n        var params = args ? args.concat() : [];\n        context = bound ? context || this : this;\n        return params.push.apply(params, arguments) < f.length && arguments.length ? _curry.call(context, params) : f.apply(context, params);\n      } : f;\n    };\n\n    return _curry();\n  }\n\n  function import$(obj, src) {\n    var own = {}.hasOwnProperty;\n\n    for (var key in src) {\n      if (own.call(src, key)) obj[key] = src[key];\n    }\n\n    return obj;\n  }\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}