{"ast":null,"code":"(function () {\n  var React, ref$, render, unmountComponentAtNode, Tether, ReactTether;\n  React = require('react');\n  ref$ = require('react-dom'), render = ref$.render, unmountComponentAtNode = ref$.unmountComponentAtNode;\n  Tether = require('tether');\n\n  ReactTether = function (superclass) {\n    var prototype = extend$((import$(ReactTether, superclass).displayName = 'ReactTether', ReactTether), superclass).prototype,\n        constructor = ReactTether;\n    ReactTether.defaultProps = {\n      parentElement: function parentElement() {\n        return document.body;\n      }\n    };\n\n    ReactTether.prototype.render = function () {\n      return null;\n    };\n\n    ReactTether.prototype.initTether = function (props) {\n      var this$ = this;\n      this.node = document.createElement('div');\n      this.props.parentElement().appendChild(this.node);\n      this.tether = new Tether(import$({\n        element: this.node,\n        target: props.target()\n      }, props.options));\n      render(props.children, this.node, function () {\n        return this$.tether.position();\n      });\n    };\n\n    ReactTether.prototype.destroyTether = function () {\n      if (this.tether) {\n        this.tether.destroy();\n      }\n\n      if (this.node) {\n        unmountComponentAtNode(this.node);\n        this.node.parentElement.removeChild(this.node);\n      }\n\n      this.node = this.tether = undefined;\n    };\n\n    ReactTether.prototype.componentDidMount = function () {\n      if (this.props.children) {\n        this.initTether(this.props);\n      }\n    };\n\n    ReactTether.prototype.componentWillReceiveProps = function (newProps) {\n      var this$ = this;\n\n      if (this.props.children && !newProps.children) {\n        this.destroyTether();\n      } else if (newProps.children && !this.props.children) {\n        this.initTether(newProps);\n      } else if (newProps.children) {\n        this.tether.setOptions(import$({\n          element: this.node,\n          target: newProps.target()\n        }, newProps.options));\n        render(newProps.children, this.node, function () {\n          return this$.tether.position();\n        });\n      }\n    };\n\n    ReactTether.prototype.componentWillUnmount = function () {\n      this.destroyTether();\n    };\n\n    function ReactTether() {\n      ReactTether.superclass.apply(this, arguments);\n    }\n\n    return ReactTether;\n  }(React.PureComponent);\n\n  module.exports = ReactTether;\n\n  function extend$(sub, sup) {\n    function fun() {}\n\n    fun.prototype = (sub.superclass = sup).prototype;\n    (sub.prototype = new fun()).constructor = sub;\n    if (typeof sup.extended == 'function') sup.extended(sub);\n    return sub;\n  }\n\n  function import$(obj, src) {\n    var own = {}.hasOwnProperty;\n\n    for (var key in src) {\n      if (own.call(src, key)) obj[key] = src[key];\n    }\n\n    return obj;\n  }\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}