{"ast":null,"code":"(function () {\n  var ref$, filter, id, map, isEqualToObject, React, createFactory, div, input, span, findDOMNode, ReactCSSTransitionGroup, ReactTether, DivWrapper, OptionWrapper, cancelEvent, classNameFromObject, DropdownMenu;\n  ref$ = require('prelude-ls'), filter = ref$.filter, id = ref$.id, map = ref$.map;\n  isEqualToObject = require('prelude-extension').isEqualToObject;\n  React = require('react'), createFactory = React.createFactory;\n  ref$ = require('react-dom-factories'), div = ref$.div, input = ref$.input, span = ref$.span;\n  findDOMNode = require('react-dom').findDOMNode;\n  ReactCSSTransitionGroup = createFactory(require('react-transition-group/CSSTransition'));\n  ReactTether = createFactory(require('./ReactTether'));\n  DivWrapper = createFactory(require('./DivWrapper'));\n  OptionWrapper = createFactory(require('./OptionWrapper'));\n  ref$ = require('./utils'), cancelEvent = ref$.cancelEvent, classNameFromObject = ref$.classNameFromObject;\n\n  module.exports = DropdownMenu = function (superclass) {\n    var prototype = extend$((import$(DropdownMenu, superclass).displayName = 'DropdownMenu', DropdownMenu), superclass).prototype,\n        constructor = DropdownMenu;\n    DropdownMenu.defaultProps = {\n      className: \"\",\n      dropdownDirection: 1,\n      groupId: function groupId(it) {\n        return it.groupId;\n      },\n      groupsAsColumns: false,\n      highlightedUid: undefined,\n      onHighlightedUidChange: function onHighlightedUidChange(uid, callback) {},\n      onOptionClick: function onOptionClick(uid) {},\n      onScrollLockChange: function onScrollLockChange(scrollLock) {},\n      options: [],\n      renderNoResultsFound: function renderNoResultsFound() {\n        return div({\n          className: 'no-results-found'\n        }, \"No results found\");\n      },\n      renderGroupTitle: function renderGroupTitle(index, arg$) {\n        var groupId, title;\n\n        if (arg$ != null) {\n          groupId = arg$.groupId, title = arg$.title;\n        }\n\n        return div({\n          className: 'simple-group-title',\n          key: groupId\n        }, title);\n      },\n      renderOption: function renderOption(arg$) {\n        var label, newOption, selectable, isSelectable;\n\n        if (arg$ != null) {\n          label = arg$.label, newOption = arg$.newOption, selectable = arg$.selectable;\n        }\n\n        isSelectable = typeof selectable === 'undefined' || selectable;\n        return div({\n          className: \"simple-option \" + (isSelectable ? '' : 'not-selectable')\n        }, span(null, !!newOption ? \"Add \" + label + \" ...\" : label));\n      },\n      scrollLock: false,\n      style: {},\n      tether: false,\n      tetherProps: {},\n      theme: 'default',\n      transitionEnter: false,\n      transitionLeave: false,\n      transitionEnterTimeout: 200,\n      transitionLeaveTimeout: 200,\n      uid: id\n    };\n\n    DropdownMenu.prototype.render = function () {\n      var dynamicClassName, ref$;\n      dynamicClassName = classNameFromObject((ref$ = {}, ref$[this.props.theme + \"\"] = 1, ref$[this.props.className + \"\"] = 1, ref$.flipped = this.props.dropdownDirection === -1, ref$.tethered = this.props.tether, ref$));\n\n      if (this.props.tether) {\n        return ReactTether((ref$ = import$({}, this.props.tetherProps), ref$.options = {\n          attachment: \"top left\",\n          targetAttachment: \"bottom left\",\n          constraints: [{\n            to: 'scrollParent'\n          }]\n        }, ref$), this.renderAnimatedDropdown({\n          dynamicClassName: dynamicClassName\n        }));\n      } else {\n        return this.renderAnimatedDropdown({\n          dynamicClassName: dynamicClassName\n        });\n      }\n    };\n\n    DropdownMenu.prototype.renderAnimatedDropdown = function (computedState) {\n      var dynamicClassName;\n      dynamicClassName = computedState.dynamicClassName;\n\n      if (!!this.props.transitionEnter || !!this.props.transitionLeave) {\n        return ReactCSSTransitionGroup({\n          ref: 'dropdownMenuWrapper',\n          component: 'div',\n          transitionName: 'custom',\n          transitionEnter: this.props.transitionEnter,\n          transitionLeave: this.props.transitionLeave,\n          transitionEnterTimeout: this.props.transitionEnterTimeout,\n          transitionLeaveTimeout: this.props.transitionLeaveTimeout,\n          className: \"dropdown-menu-wrapper \" + dynamicClassName\n        }, this.renderDropdown(computedState));\n      } else {\n        return this.renderDropdown(computedState);\n      }\n    };\n\n    DropdownMenu.prototype.renderOptions = function (options) {\n      var this$ = this;\n      return map(function (index) {\n        var option, uid;\n        option = options[index];\n        uid = this$.props.uid(option);\n        return OptionWrapper(import$({\n          uid: uid,\n          ref: function ref(element) {\n            this$[\"option-\" + this$.uidToString(uid)] = element;\n          },\n          key: this$.uidToString(uid),\n          item: option,\n          highlight: isEqualToObject(this$.props.highlightedUid, uid),\n          selectable: option != null ? option.selectable : void 8,\n          onMouseMove: function onMouseMove(arg$) {\n            var currentTarget;\n            currentTarget = arg$.currentTarget;\n\n            if (this$.props.scrollLock) {\n              this$.props.onScrollLockChange(false);\n            }\n          },\n          onMouseOut: function onMouseOut() {\n            if (!this$.props.scrollLock) {\n              this$.props.onHighlightedUidChange(undefined, function () {});\n            }\n          },\n          renderItem: this$.props.renderOption\n        }, function () {\n          switch (false) {\n            case !(typeof (option != null ? option.selectable : void 8) === 'boolean' && !option.selectable):\n              return {\n                onClick: cancelEvent\n              };\n\n            default:\n              return {\n                onClick: function onClick() {\n                  if (!this$.props.scrollLock) {\n                    this$.props.onHighlightedUidChange(uid, function () {});\n                  }\n\n                  this$.props.onOptionClick(this$.props.highlightedUid);\n                },\n                onMouseOver: function onMouseOver(arg$) {\n                  var currentTarget;\n                  currentTarget = arg$.currentTarget;\n\n                  if ('ontouchstart' in window) {\n                    return false;\n                  }\n\n                  if (!this$.props.scrollLock) {\n                    this$.props.onHighlightedUidChange(uid, function () {});\n                  }\n                }\n              };\n          }\n        }()));\n      })(function () {\n        var i$,\n            to$,\n            results$ = [];\n\n        for (i$ = 0, to$ = options.length; i$ < to$; ++i$) {\n          results$.push(i$);\n        }\n\n        return results$;\n      }());\n    };\n\n    DropdownMenu.prototype.renderDropdown = function (arg$) {\n      var dynamicClassName,\n          ref$,\n          ref1$,\n          groups,\n          this$ = this;\n      dynamicClassName = arg$.dynamicClassName;\n\n      if (this.props.open) {\n        return DivWrapper({\n          className: \"dropdown-menu \" + dynamicClassName,\n          ref: function ref(element) {\n            !!element && (this$.dropdownMenu = element);\n          },\n          onHeightChange: function onHeightChange(height) {\n            if (this$.refs.dropdownMenuWrapper) {\n              findDOMNode(this$.refs.dropdownMenuWrapper).style.height = height + \"px\";\n            }\n          }\n        }, this.props.options.length === 0 ? this.props.renderNoResultsFound() : ((ref$ = this.props) != null ? (ref1$ = ref$.groups) != null ? ref1$.length : void 8 : void 8) > 0 ? (groups = map(function (index) {\n          var group, groupId, options;\n          group = this$.props.groups[index], groupId = group.groupId;\n          options = filter(function (it) {\n            return this$.props.groupId(it) === groupId;\n          })(this$.props.options);\n          return {\n            index: index,\n            group: group,\n            options: options\n          };\n        })(function () {\n          var i$,\n              to$,\n              results$ = [];\n\n          for (i$ = 0, to$ = this.props.groups.length; i$ < to$; ++i$) {\n            results$.push(i$);\n          }\n\n          return results$;\n        }.call(this)), div({\n          className: \"groups \" + (!!this.props.groupsAsColumns ? 'as-columns' : '')\n        }, map(function (arg$) {\n          var index, group, groupId, options;\n          index = arg$.index, group = arg$.group, groupId = group.groupId, options = arg$.options;\n          return div({\n            key: groupId\n          }, this$.props.renderGroupTitle(index, group, options), div({\n            className: 'options'\n          }, this$.renderOptions(options)));\n        })(filter(function (it) {\n          return it.options.length > 0;\n        })(groups)))) : this.renderOptions(this.props.options));\n      } else {\n        return null;\n      }\n    };\n\n    DropdownMenu.prototype.componentDidUpdate = function (prevProps) {\n      var x$, dropdownMenu, ref$;\n\n      if (!deepEq$(prevProps.dropdownDirection, this.props.dropdownDirection, '===') && this.props.open) {\n        x$ = dropdownMenu = findDOMNode((ref$ = this.refs.dropdownMenuWrapper) != null ? ref$ : this.dropdownMenu);\n\n        if (x$ != null) {\n          x$.style.bottom = function () {\n            switch (false) {\n              case this.props.dropdownDirection !== -1:\n                return this.props.bottomAnchor().offsetHeight + dropdownMenu.style.marginBottom + \"px\";\n\n              default:\n                return \"\";\n            }\n          }.call(this);\n        }\n      }\n    };\n\n    DropdownMenu.prototype.highlightAndScrollToOption = function (index, callback) {\n      var uid,\n          this$ = this;\n      callback == null && (callback = function callback() {});\n      uid = this.props.uid(this.props.options[index]);\n      this.props.onHighlightedUidChange(uid, function () {\n        var ref$, optionElement, parentElement, optionHeight;\n\n        if ((ref$ = findDOMNode(this$ != null ? this$[\"option-\" + this$.uidToString(uid)] : void 8)) != null) {\n          optionElement = ref$;\n        }\n\n        if (!!optionElement) {\n          parentElement = optionElement.parentElement;\n          optionHeight = optionElement.offsetHeight - 1;\n\n          if (optionElement.offsetTop - parentElement.scrollTop >= parentElement.offsetHeight) {\n            parentElement.scrollTop = optionElement.offsetTop - parentElement.offsetHeight + optionHeight;\n          } else if (optionElement.offsetTop - parentElement.scrollTop + optionHeight <= 0) {\n            parentElement.scrollTop = optionElement.offsetTop;\n          }\n        }\n\n        return callback();\n      });\n    };\n\n    DropdownMenu.prototype.highlightAndScrollToSelectableOption = function (index, direction, callback) {\n      var option,\n          ref$,\n          ref1$,\n          this$ = this;\n      callback == null && (callback = function callback() {});\n\n      if (index < 0 || index >= this.props.options.length) {\n        this.props.onHighlightedUidChange(undefined, function () {\n          return callback(false);\n        });\n      } else {\n        option = (ref$ = this.props) != null ? (ref1$ = ref$.options) != null ? ref1$[index] : void 8 : void 8;\n\n        if (typeof (option != null ? option.selectable : void 8) === 'boolean' && !option.selectable) {\n          this.highlightAndScrollToSelectableOption(index + direction, direction, callback);\n        } else {\n          this.highlightAndScrollToOption(index, function () {\n            return callback(true);\n          });\n        }\n      }\n    };\n\n    DropdownMenu.prototype.uidToString = function (uid) {\n      return (typeof uid === 'object' ? JSON.stringify : id)(uid);\n    };\n\n    function DropdownMenu() {\n      DropdownMenu.superclass.apply(this, arguments);\n    }\n\n    return DropdownMenu;\n  }(React.PureComponent);\n\n  function extend$(sub, sup) {\n    function fun() {}\n\n    fun.prototype = (sub.superclass = sup).prototype;\n    (sub.prototype = new fun()).constructor = sub;\n    if (typeof sup.extended == 'function') sup.extended(sub);\n    return sub;\n  }\n\n  function import$(obj, src) {\n    var own = {}.hasOwnProperty;\n\n    for (var key in src) {\n      if (own.call(src, key)) obj[key] = src[key];\n    }\n\n    return obj;\n  }\n\n  function deepEq$(x, y, type) {\n    var toString = {}.toString,\n        hasOwnProperty = {}.hasOwnProperty,\n        has = function has(obj, key) {\n      return hasOwnProperty.call(obj, key);\n    };\n\n    var first = true;\n    return eq(x, y, []);\n\n    function eq(a, b, stack) {\n      var className, length, size, result, alength, blength, r, key, ref, sizeB;\n\n      if (a == null || b == null) {\n        return a === b;\n      }\n\n      if (a.__placeholder__ || b.__placeholder__) {\n        return true;\n      }\n\n      if (a === b) {\n        return a !== 0 || 1 / a == 1 / b;\n      }\n\n      className = toString.call(a);\n\n      if (toString.call(b) != className) {\n        return false;\n      }\n\n      switch (className) {\n        case '[object String]':\n          return a == String(b);\n\n        case '[object Number]':\n          return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b;\n\n        case '[object Date]':\n        case '[object Boolean]':\n          return +a == +b;\n\n        case '[object RegExp]':\n          return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;\n      }\n\n      if (typeof a != 'object' || typeof b != 'object') {\n        return false;\n      }\n\n      length = stack.length;\n\n      while (length--) {\n        if (stack[length] == a) {\n          return true;\n        }\n      }\n\n      stack.push(a);\n      size = 0;\n      result = true;\n\n      if (className == '[object Array]') {\n        alength = a.length;\n        blength = b.length;\n\n        if (first) {\n          switch (type) {\n            case '===':\n              result = alength === blength;\n              break;\n\n            case '<==':\n              result = alength <= blength;\n              break;\n\n            case '<<=':\n              result = alength < blength;\n              break;\n          }\n\n          size = alength;\n          first = false;\n        } else {\n          result = alength === blength;\n          size = alength;\n        }\n\n        if (result) {\n          while (size--) {\n            if (!(result = size in a == size in b && eq(a[size], b[size], stack))) {\n              break;\n            }\n          }\n        }\n      } else {\n        if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) {\n          return false;\n        }\n\n        for (key in a) {\n          if (has(a, key)) {\n            size++;\n\n            if (!(result = has(b, key) && eq(a[key], b[key], stack))) {\n              break;\n            }\n          }\n        }\n\n        if (result) {\n          sizeB = 0;\n\n          for (key in b) {\n            if (has(b, key)) {\n              ++sizeB;\n            }\n          }\n\n          if (first) {\n            if (type === '<<=') {\n              result = size < sizeB;\n            } else if (type === '<==') {\n              result = size <= sizeB;\n            } else {\n              result = size === sizeB;\n            }\n          } else {\n            first = false;\n            result = size === sizeB;\n          }\n        }\n      }\n\n      stack.pop();\n      return result;\n    }\n  }\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}