{"ast":null,"code":"(function () {\n  var ref$, each, filter, find, findIndex, id, initial, last, map, objToPairs, partition, reject, reverse, Str, sortBy, sum, values, clamp, isEqualToObject, React, createFactory, div, input, path, span, svg, findDOMNode, ToggleButton, DropdownMenu, OptionWrapper, ValueWrapper, ResetButton, ResizableInput, cancelEvent, classNameFromObject, ReactSelectize;\n  ref$ = require('prelude-ls'), each = ref$.each, filter = ref$.filter, find = ref$.find, findIndex = ref$.findIndex, id = ref$.id, initial = ref$.initial, last = ref$.last, map = ref$.map, objToPairs = ref$.objToPairs, partition = ref$.partition, reject = ref$.reject, reverse = ref$.reverse, Str = ref$.Str, sortBy = ref$.sortBy, sum = ref$.sum, values = ref$.values;\n  ref$ = require('prelude-extension'), clamp = ref$.clamp, isEqualToObject = ref$.isEqualToObject;\n  React = require('react'), createFactory = React.createFactory;\n  ref$ = require('react-dom-factories'), div = ref$.div, input = ref$.input, path = ref$.path, span = ref$.span, svg = ref$.svg;\n  findDOMNode = require('react-dom').findDOMNode;\n  ToggleButton = createFactory(require('./ToggleButton'));\n  DropdownMenu = createFactory(require('./DropdownMenu'));\n  OptionWrapper = createFactory(require('./OptionWrapper'));\n  ValueWrapper = createFactory(require('./ValueWrapper'));\n  ResetButton = createFactory(require('./ResetButton'));\n  ResizableInput = createFactory(require('./ResizableInput'));\n  ref$ = require('./utils'), cancelEvent = ref$.cancelEvent, classNameFromObject = ref$.classNameFromObject;\n\n  module.exports = ReactSelectize = function (superclass) {\n    var prototype = extend$((import$(ReactSelectize, superclass).displayName = 'ReactSelectize', ReactSelectize), superclass).prototype,\n        constructor = ReactSelectize;\n    ReactSelectize.prototype.focusLock = false;\n    ReactSelectize.defaultProps = {\n      anchor: null,\n      autofocus: false,\n      cancelKeyboardEventOnSelection: true,\n      delimiters: [],\n      disabled: false,\n      dropdownDirection: 1,\n      firstOptionIndexToHighlight: function firstOptionIndexToHighlight(options) {\n        return 0;\n      },\n      groupId: function groupId(it) {\n        return it.groupId;\n      },\n      groupsAsColumns: false,\n      highlightedUid: undefined,\n      inputProps: {},\n      onAnchorChange: function onAnchorChange(anchor) {},\n      onBlur: function onBlur(e) {},\n      onEnter: function onEnter(highlightedOption) {},\n      onFocus: function onFocus(e) {},\n      onHighlightedUidChange: function onHighlightedUidChange(uid, callback) {},\n      onKeyboardSelectionFailed: function onKeyboardSelectionFailed(keycode) {},\n      onOpenChange: function onOpenChange(open, callback) {},\n      onPaste: function onPaste(e) {\n        true;\n      },\n      onScrollLockChange: function onScrollLockChange(scrollLock) {},\n      onSearchChange: function onSearchChange(search, callback) {},\n      onValuesChange: function onValuesChange(values, callback) {},\n      open: false,\n      hideResetButton: false,\n      renderValue: function renderValue(arg$) {\n        var label;\n        label = arg$.label;\n        return div({\n          className: 'simple-value'\n        }, span(null, label));\n      },\n      renderToggleButton: ToggleButton,\n      renderResetButton: ResetButton,\n      scrollLock: false,\n      search: \"\",\n      style: {},\n      theme: 'default',\n      uid: id,\n      values: []\n    };\n\n    ReactSelectize.prototype.render = function () {\n      var anchorIndex,\n          renderSelectedValues,\n          flipped,\n          ref$,\n          ref1$,\n          this$ = this;\n\n      anchorIndex = function () {\n        var ref$;\n\n        switch (false) {\n          case !(typeof this.props.anchor === 'undefined' || this.props.anchor === null):\n            return -1;\n\n          default:\n            return (ref$ = findIndex(function (it) {\n              return this$.isEqualToObject(it, this$.props.anchor);\n            }, this.props.values)) != null ? ref$ : this.props.values.length - 1;\n        }\n      }.call(this);\n\n      renderSelectedValues = function renderSelectedValues(selectedValues) {\n        return map(function (index) {\n          var item, uid;\n          item = this$.props.values[index];\n          uid = this$.props.uid(item);\n          return ValueWrapper({\n            key: this$.uidToString(uid),\n            uid: uid,\n            item: item,\n            renderItem: this$.props.renderValue\n          });\n        })(selectedValues);\n      };\n\n      flipped = this.props.dropdownDirection === -1;\n      return div({\n        className: classNameFromObject((ref$ = {\n          'react-selectize': 1\n        }, ref$[this.props.theme + \"\"] = 1, ref$['root-node'] = 1, ref$[this.props.className + \"\"] = 1, ref$.disabled = this.props.disabled, ref$.open = this.props.open, ref$.flipped = flipped, ref$.tethered = this.props.tether, ref$)),\n        style: this.props.style\n      }, !!this.props.name ? input({\n        type: 'hidden',\n        name: this.props.name,\n        value: this.props.serialize(this.props.values)\n      }) : void 8, div({\n        className: 'react-selectize-control',\n        ref: 'control',\n        onMouseDown: function onMouseDown(e) {\n          (function () {\n            return this$.props.onAnchorChange(last(this$.props.values), function () {\n              return this$.onOpenChange(true, function () {});\n            });\n          })();\n\n          if (!this$.props.open) {\n            return cancelEvent(e);\n          }\n        }\n      }, this.props.search.length === 0 && this.props.values.length === 0 ? div({\n        className: 'react-selectize-placeholder'\n      }, this.props.placeholder) : void 8, div({\n        className: 'react-selectize-search-field-and-selected-values'\n      }, renderSelectedValues(function () {\n        var i$,\n            to$,\n            results$ = [];\n\n        for (i$ = 0, to$ = anchorIndex; i$ <= to$; ++i$) {\n          results$.push(i$);\n        }\n\n        return results$;\n      }()), ResizableInput((ref$ = import$({\n        disabled: this.props.disabled\n      }, this.props.inputProps), ref$.ref = 'search', ref$.type = 'text', ref$.value = this.props.search, ref$.onChange = function (arg$) {\n        var value;\n        value = arg$.currentTarget.value;\n        return this$.props.onSearchChange(value, function () {\n          return this$.highlightAndScrollToSelectableOption(this$.props.firstOptionIndexToHighlight(this$.props.options), 1);\n        });\n      }, ref$.onFocus = function (e) {\n        (function () {\n          return function (callback) {\n            if (!!this$.focusLock) {\n              return callback(this$.focusLock = false);\n            } else {\n              return this$.onOpenChange(true, function () {\n                return callback(true);\n              });\n            }\n          };\n        })()(function () {\n          return this$.props.onFocus(e);\n        });\n      }, ref$.onBlur = function (e) {\n        if (this$.refs.dropdownMenu && document.activeElement === findDOMNode(this$.refs.dropdownMenu)) {\n          return;\n        }\n\n        return this$.closeDropdown(function () {\n          return this$.props.onBlur(e);\n        });\n      }, ref$.onPaste = this.props.onPaste, ref$.onKeyDown = function (e) {\n        return this$.handleKeydown({\n          anchorIndex: anchorIndex\n        }, e);\n      }, ref$)), renderSelectedValues(function () {\n        var i$,\n            to$,\n            results$ = [];\n\n        for (i$ = anchorIndex + 1, to$ = this.props.values.length; i$ < to$; ++i$) {\n          results$.push(i$);\n        }\n\n        return results$;\n      }.call(this))), this.props.values.length > 0 && !this.props.hideResetButton ? div({\n        className: 'react-selectize-reset-button-container',\n        onClick: function onClick(e) {\n          (function () {\n            return this$.props.onValuesChange([], function () {\n              return this$.props.onSearchChange(\"\", function () {\n                return this$.highlightAndFocus();\n              });\n            });\n          })();\n\n          return cancelEvent(e);\n        }\n      }, this.props.renderResetButton()) : void 8, div({\n        className: 'react-selectize-toggle-button-container',\n        onMouseDown: function onMouseDown(e) {\n          if (this$.props.open) {\n            this$.onOpenChange(false, function () {});\n          } else {\n            this$.props.onAnchorChange(last(this$.props.values), function () {\n              return this$.onOpenChange(true, function () {});\n            });\n          }\n\n          return cancelEvent(e);\n        }\n      }, this.props.renderToggleButton({\n        open: this.props.open,\n        flipped: flipped\n      }))), DropdownMenu((ref$ = import$({}, this.props), ref$.ref = 'dropdownMenu', ref$.className = classNameFromObject((ref1$ = {\n        'react-selectize': 1\n      }, ref1$[this.props.className + \"\"] = 1, ref1$)), ref$.theme = this.props.theme, ref$.scrollLock = this.props.scrollLock, ref$.onScrollChange = this.props.onScrollChange, ref$.bottomAnchor = function () {\n        return findDOMNode(this$.refs.control);\n      }, ref$.tetherProps = (ref1$ = import$({}, this.props.tetherProps), ref1$.target = function () {\n        return findDOMNode(this$.refs.control);\n      }, ref1$), ref$.highlightedUid = this.props.highlightedUid, ref$.onHighlightedUidChange = this.props.onHighlightedUidChange, ref$.onOptionClick = function (highlightedUid) {\n        this$.selectHighlightedUid(anchorIndex, function () {});\n      }, ref$)));\n    };\n\n    ReactSelectize.prototype.handleKeydown = function (arg$, e) {\n      var anchorIndex,\n          result,\n          index,\n          this$ = this;\n      anchorIndex = arg$.anchorIndex;\n      e.persist();\n\n      switch (e.which) {\n        case 8:\n          if (this.props.search.length > 0 || anchorIndex === -1) {\n            return;\n          }\n\n          (function () {\n            var anchorIndexOnRemove, nextAnchor, valueToRemove, ref$;\n            anchorIndexOnRemove = anchorIndex;\n            nextAnchor = anchorIndex - 1 < 0 ? undefined : this$.props.values[anchorIndex - 1];\n            valueToRemove = this$.props.values[anchorIndex];\n            return this$.props.onValuesChange((ref$ = reject(function (it) {\n              return this$.isEqualToObject(it, valueToRemove);\n            })(this$.props.values)) != null ? ref$ : [], function () {\n              return function () {\n                return function (callback) {\n                  if (typeof find(function (it) {\n                    return this$.isEqualToObject(it, valueToRemove);\n                  }, this$.props.values) === 'undefined') {\n                    if (!!this$.props.restoreOnBackspace) {\n                      return this$.props.onSearchChange(this$.props.restoreOnBackspace(valueToRemove), function () {\n                        return callback(true);\n                      });\n                    } else {\n                      return callback(true);\n                    }\n                  } else {\n                    return callback(false);\n                  }\n                };\n              }()(function (result) {\n                if (!!result) {\n                  this$.highlightAndScrollToSelectableOption(this$.props.firstOptionIndexToHighlight(this$.props.options), 1);\n\n                  if (anchorIndex === anchorIndexOnRemove && (typeof nextAnchor === 'undefined' || !!find(function (it) {\n                    return this$.isEqualToObject(it, nextAnchor);\n                  })(this$.props.values))) {\n                    return this$.props.onAnchorChange(nextAnchor, function () {});\n                  }\n                }\n              });\n            });\n          })();\n\n          cancelEvent(e);\n          break;\n\n        case 27:\n          (function () {\n            if (this$.props.open) {\n              return function (it) {\n                return this$.onOpenChange(false, it);\n              };\n            } else {\n              return function (it) {\n                return this$.props.onValuesChange([], it);\n              };\n            }\n          })()(function () {\n            return this$.props.onSearchChange(\"\", function () {\n              return this$.focusOnInput();\n            });\n          });\n      }\n\n      if (this.props.open && in$(e.which, [13].concat(this.props.delimiters)) && !(e != null && e.metaKey || e != null && e.ctrlKey || e != null && e.shiftKey)) {\n        result = this.selectHighlightedUid(anchorIndex, function (selectedValue) {\n          if (typeof selectedValue === 'undefined') {\n            return this$.props.onKeyboardSelectionFailed(e.which);\n          }\n        });\n\n        if (result && this.props.cancelKeyboardEventOnSelection) {\n          return cancelEvent(e);\n        }\n      }\n\n      if (this.props.search.length === 0) {\n        switch (e.which) {\n          case 37:\n            this.props.onAnchorChange(anchorIndex - 1 < 0 || e.metaKey ? undefined : this.props.values[clamp(anchorIndex - 1, 0, this.props.values.length - 1)], function () {});\n            break;\n\n          case 39:\n            this.props.onAnchorChange(e.metaKey ? last(this.props.values) : this.props.values[clamp(anchorIndex + 1, 0, this.props.values.length - 1)], function () {});\n        }\n      }\n\n      switch (e.which) {\n        case 38:\n          this.props.onScrollLockChange(true);\n\n          index = function () {\n            switch (false) {\n              case typeof this.props.highlightedUid !== 'undefined':\n                return 0;\n\n              default:\n                return -1 + this.optionIndexFromUid(this.props.highlightedUid);\n            }\n          }.call(this);\n\n          return this.highlightAndScrollToSelectableOption(index, -1, function (result) {\n            if (!result) {\n              return this$.highlightAndScrollToSelectableOption(this$.props.options.length - 1, -1);\n            }\n          });\n\n        case 40:\n          this.props.onScrollLockChange(true);\n\n          index = function () {\n            switch (false) {\n              case typeof this.props.highlightedUid !== 'undefined':\n                return 0;\n\n              default:\n                return 1 + this.optionIndexFromUid(this.props.highlightedUid);\n            }\n          }.call(this);\n\n          return this.highlightAndScrollToSelectableOption(index, 1, function (result) {\n            if (!result) {\n              return this$.highlightAndScrollToSelectableOption(0, 1);\n            }\n          });\n      }\n    };\n\n    ReactSelectize.prototype.componentDidMount = function () {\n      if (this.props.autofocus) {\n        this.focus();\n      }\n\n      if (this.props.open) {\n        this.highlightAndFocus();\n      }\n    };\n\n    ReactSelectize.prototype.componentDidUpdate = function (prevProps) {\n      var this$ = this;\n\n      if (this.props.open && !prevProps.open && this.props.highlightedUid === undefined) {\n        this.highlightAndFocus();\n      }\n\n      if (!this.props.open && prevProps.open) {\n        this.props.onHighlightedUidChange(undefined, function () {});\n      }\n    };\n\n    ReactSelectize.prototype.componentWillReceiveProps = function (props) {\n      var this$ = this;\n\n      if ((typeof this.props.disabled === 'undefined' || this.props.disabled === false) && typeof props.disabled !== 'undefined' && props.disabled === true) {\n        this.onOpenChange(false, function () {});\n      }\n    };\n\n    ReactSelectize.prototype.optionIndexFromUid = function (uid) {\n      var this$ = this;\n      return findIndex(function (it) {\n        return isEqualToObject(uid, this$.props.uid(it));\n      })(this.props.options);\n    };\n\n    ReactSelectize.prototype.closeDropdown = function (callback) {\n      var this$ = this;\n      this.onOpenChange(false, function () {\n        return this$.props.onAnchorChange(last(this$.props.values), callback);\n      });\n    };\n\n    ReactSelectize.prototype.blur = function () {\n      this.refs.search.blur();\n    };\n\n    ReactSelectize.prototype.focus = function () {\n      this.refs.search.focus();\n    };\n\n    ReactSelectize.prototype.focusOnInput = function () {\n      var input;\n      input = findDOMNode(this.refs.search);\n\n      if (input !== document.activeElement) {\n        this.focusLock = true;\n        input.focus();\n        input.value = input.value;\n      }\n    };\n\n    ReactSelectize.prototype.highlightAndFocus = function () {\n      this.highlightAndScrollToSelectableOption(this.props.firstOptionIndexToHighlight(this.props.options), 1);\n      this.focusOnInput();\n    };\n\n    ReactSelectize.prototype.highlightAndScrollToOption = function (index, callback) {\n      callback == null && (callback = function callback() {});\n      this.refs.dropdownMenu.highlightAndScrollToOption(index, callback);\n    };\n\n    ReactSelectize.prototype.highlightAndScrollToSelectableOption = function (index, direction, callback) {\n      var this$ = this;\n      callback == null && (callback = function callback() {});\n      (function () {\n        if (!this$.props.open) {\n          return function (it) {\n            return this$.onOpenChange(true, it);\n          };\n        } else {\n          return function (it) {\n            return it();\n          };\n        }\n      })()(function () {\n        return this$.refs.dropdownMenu.highlightAndScrollToSelectableOption(index, direction, callback);\n      });\n    };\n\n    ReactSelectize.prototype.isEqualToObject = function () {\n      return isEqualToObject(this.props.uid(arguments[0]), this.props.uid(arguments[1]));\n    };\n\n    ReactSelectize.prototype.onOpenChange = function (open, callback) {\n      return this.props.onOpenChange(this.props.disabled ? false : open, callback);\n    };\n\n    ReactSelectize.prototype.selectHighlightedUid = function (anchorIndex, callback) {\n      var index,\n          option,\n          this$ = this;\n\n      if (this.props.highlightedUid === undefined) {\n        callback();\n        return false;\n      }\n\n      index = this.optionIndexFromUid(this.props.highlightedUid);\n\n      if (typeof index !== 'number') {\n        callback();\n        return false;\n      }\n\n      option = this.props.options[index];\n\n      (function () {\n        return this$.props.onValuesChange(map(function (it) {\n          return this$.props.values[it];\n        }, function () {\n          var i$,\n              to$,\n              results$ = [];\n\n          for (i$ = 0, to$ = anchorIndex; i$ <= to$; ++i$) {\n            results$.push(i$);\n          }\n\n          return results$;\n        }()).concat([option], map(function (it) {\n          return this$.props.values[it];\n        }, function () {\n          var i$,\n              to$,\n              results$ = [];\n\n          for (i$ = anchorIndex + 1, to$ = this.props.values.length; i$ < to$; ++i$) {\n            results$.push(i$);\n          }\n\n          return results$;\n        }.call(this$))), function () {\n          var value;\n          value = find(function (it) {\n            return this$.isEqualToObject(it, option);\n          }, this$.props.values);\n\n          if (!value) {\n            callback();\n            return;\n          }\n\n          return this$.props.onSearchChange(\"\", function () {\n            return this$.props.onAnchorChange(value, function () {\n              if (!this$.props.open) {\n                callback(value);\n                return;\n              }\n\n              return this$.highlightAndScrollToSelectableOption(index, 1, function (result) {\n                if (!!result) {\n                  callback(value);\n                  return;\n                }\n\n                return this$.highlightAndScrollToSelectableOption(this$.props.firstOptionIndexToHighlight(this$.props.options), 1, function (result) {\n                  if (!result) {\n                    return this$.onOpenChange(false, function () {\n                      return callback(value);\n                    });\n                  } else {\n                    return callback(value);\n                  }\n                });\n              });\n            });\n          });\n        });\n      })();\n\n      return true;\n    };\n\n    ReactSelectize.prototype.uidToString = function (uid) {\n      return (typeof uid === 'object' ? JSON.stringify : id)(uid);\n    };\n\n    function ReactSelectize() {\n      ReactSelectize.superclass.apply(this, arguments);\n    }\n\n    return ReactSelectize;\n  }(React.Component);\n\n  function extend$(sub, sup) {\n    function fun() {}\n\n    fun.prototype = (sub.superclass = sup).prototype;\n    (sub.prototype = new fun()).constructor = sub;\n    if (typeof sup.extended == 'function') sup.extended(sub);\n    return sub;\n  }\n\n  function import$(obj, src) {\n    var own = {}.hasOwnProperty;\n\n    for (var key in src) {\n      if (own.call(src, key)) obj[key] = src[key];\n    }\n\n    return obj;\n  }\n\n  function in$(x, xs) {\n    var i = -1,\n        l = xs.length >>> 0;\n\n    while (++i < l) {\n      if (x === xs[i]) return true;\n    }\n\n    return false;\n  }\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}