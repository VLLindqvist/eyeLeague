{"ast":null,"code":"(function () {\n  var ref$, each, objToPairs, React, createFactory, input, findDOMNode, ResizableInput;\n  ref$ = require('prelude-ls'), each = ref$.each, objToPairs = ref$.objToPairs;\n  React = require('react'), createFactory = React.createFactory;\n  input = require('react-dom-factories').input;\n  findDOMNode = require('react-dom').findDOMNode;\n\n  module.exports = ResizableInput = function (superclass) {\n    var prototype = extend$((import$(ResizableInput, superclass).displayName = 'ResizableInput', ResizableInput), superclass).prototype,\n        constructor = ResizableInput;\n\n    ResizableInput.prototype.render = function () {\n      var ref$;\n      return input((ref$ = import$({}, this.props), ref$.type = 'input', ref$.className = 'resizable-input', ref$));\n    };\n\n    ResizableInput.prototype.autosize = function () {\n      var x$, inputElement, y$, dummpyInput, ref$;\n      x$ = inputElement = findDOMNode(this);\n      x$.style.width = '0px';\n\n      if (inputElement.value.length === 0) {\n        return inputElement.style.width = !!(inputElement != null && inputElement.currentStyle) ? '4px' : '2px';\n      } else {\n        if (inputElement.scrollWidth > 0) {\n          return inputElement.style.width = 2 + inputElement.scrollWidth + \"px\";\n        } else {\n          y$ = dummpyInput = document.createElement('div');\n          y$.innerHTML = inputElement.value;\n\n          (function () {\n            var ref$;\n            return ref$ = dummpyInput.style, ref$.display = 'inline-block', ref$.width = \"\", ref$;\n          })(each(function (arg$) {\n            var key, value;\n            key = arg$[0], value = arg$[1];\n            return dummpyInput.style[key] = value;\n          })(objToPairs(!!inputElement.currentStyle ? inputElement.currentStyle : (ref$ = document.defaultView) != null ? ref$ : window.getComputedStyle(inputElement))));\n\n          document.body.appendChild(dummpyInput);\n          inputElement.style.width = 4 + dummpyInput.clientWidth + \"px\";\n          return document.body.removeChild(dummpyInput);\n        }\n      }\n    };\n\n    ResizableInput.prototype.componentDidMount = function () {\n      this.autosize();\n    };\n\n    ResizableInput.prototype.componentDidUpdate = function () {\n      this.autosize();\n    };\n\n    ResizableInput.prototype.blur = function () {\n      return findDOMNode(this).blur();\n    };\n\n    ResizableInput.prototype.focus = function () {\n      return findDOMNode(this).focus();\n    };\n\n    function ResizableInput() {\n      ResizableInput.superclass.apply(this, arguments);\n    }\n\n    return ResizableInput;\n  }(React.PureComponent);\n\n  function extend$(sub, sup) {\n    function fun() {}\n\n    fun.prototype = (sub.superclass = sup).prototype;\n    (sub.prototype = new fun()).constructor = sub;\n    if (typeof sup.extended == 'function') sup.extended(sub);\n    return sub;\n  }\n\n  function import$(obj, src) {\n    var own = {}.hasOwnProperty;\n\n    for (var key in src) {\n      if (own.call(src, key)) obj[key] = src[key];\n    }\n\n    return obj;\n  }\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}