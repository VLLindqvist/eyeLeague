{"ast":null,"code":"(function () {\n  var ref$,\n      all,\n      any,\n      drop,\n      camelize,\n      difference,\n      filter,\n      find,\n      findIndex,\n      id,\n      last,\n      map,\n      reject,\n      isEqualToObject,\n      React,\n      createFactory,\n      div,\n      img,\n      span,\n      ReactSelectize,\n      cancelEvent,\n      SimpleSelect,\n      toString$ = {}.toString;\n  ref$ = require('prelude-ls'), all = ref$.all, any = ref$.any, drop = ref$.drop, camelize = ref$.camelize, difference = ref$.difference, filter = ref$.filter, find = ref$.find, findIndex = ref$.findIndex, id = ref$.id, last = ref$.last, map = ref$.map, reject = ref$.reject;\n  isEqualToObject = require('prelude-extension').isEqualToObject;\n  React = require('react'), createFactory = React.createFactory;\n  ref$ = require('react-dom-factories'), div = ref$.div, img = ref$.img, span = ref$.span;\n  ReactSelectize = createFactory(require('./ReactSelectize'));\n  cancelEvent = require('./utils').cancelEvent;\n\n  module.exports = SimpleSelect = function (superclass) {\n    var prototype = extend$((import$(SimpleSelect, superclass).displayName = 'SimpleSelect', SimpleSelect), superclass).prototype,\n        constructor = SimpleSelect;\n    SimpleSelect.defaultProps = {\n      delimiters: [],\n      filterOptions: curry$(function (options, search) {\n        var this$ = this;\n        return filter(function (it) {\n          return it.label.toLowerCase().trim().indexOf(search.toLowerCase().trim()) > -1;\n        })(options);\n      }),\n      firstOptionIndexToHighlight: id,\n      onBlur: function onBlur(e) {},\n      onBlurResetsInput: true,\n      onFocus: function onFocus(e) {},\n      onKeyboardSelectionFailed: function onKeyboardSelectionFailed(which) {},\n      onPaste: function onPaste(e) {\n        true;\n      },\n      placeholder: \"\",\n      renderValue: function renderValue(arg$) {\n        var label;\n        label = arg$.label;\n        return div({\n          className: 'simple-value'\n        }, span(null, label));\n      },\n      serialize: function serialize(it) {\n        return it != null ? it.value : void 8;\n      },\n      style: {},\n      tether: false,\n      uid: id\n    };\n\n    function SimpleSelect(props) {\n      var ref$;\n      SimpleSelect.superclass.call(this, props);\n      this.state = {\n        highlightedUid: undefined,\n        open: false,\n        scrollLock: false,\n        search: \"\",\n        value: (ref$ = this.props) != null ? ref$.defaultValue : void 8\n      };\n    }\n\n    SimpleSelect.prototype.render = function () {\n      var ref$,\n          filteredOptions,\n          highlightedUid,\n          onHighlightedUidChange,\n          onOpenChange,\n          _onSearchChange,\n          onValueChange,\n          open,\n          options,\n          search,\n          value,\n          values,\n          autofocus,\n          autosize,\n          cancelKeyboardEventOnSelection,\n          delimiters,\n          disabled,\n          dropdownDirection,\n          groupId,\n          groups,\n          groupsAsColumns,\n          hideResetButton,\n          name,\n          inputProps,\n          onBlurResetsInput,\n          renderToggleButton,\n          renderGroupTitle,\n          renderResetButton,\n          _serialize,\n          tether,\n          tetherProps,\n          theme,\n          transitionEnter,\n          transitionLeave,\n          transitionEnterTimeout,\n          transitionLeaveTimeout,\n          uid,\n          this$ = this;\n\n      ref$ = this.getComputedState(), filteredOptions = ref$.filteredOptions, highlightedUid = ref$.highlightedUid, onHighlightedUidChange = ref$.onHighlightedUidChange, onOpenChange = ref$.onOpenChange, _onSearchChange = ref$.onSearchChange, onValueChange = ref$.onValueChange, open = ref$.open, options = ref$.options, search = ref$.search, value = ref$.value, values = ref$.values;\n\n      if ((ref$ = this.props) != null) {\n        autofocus = ref$.autofocus, autosize = ref$.autosize, cancelKeyboardEventOnSelection = ref$.cancelKeyboardEventOnSelection, delimiters = ref$.delimiters, disabled = ref$.disabled, dropdownDirection = ref$.dropdownDirection, groupId = ref$.groupId, groups = ref$.groups, groupsAsColumns = ref$.groupsAsColumns, hideResetButton = ref$.hideResetButton, name = ref$.name, inputProps = ref$.inputProps, onBlurResetsInput = ref$.onBlurResetsInput, renderToggleButton = ref$.renderToggleButton, renderGroupTitle = ref$.renderGroupTitle, renderResetButton = ref$.renderResetButton, _serialize = ref$.serialize, tether = ref$.tether, tetherProps = ref$.tetherProps, theme = ref$.theme, transitionEnter = ref$.transitionEnter, transitionLeave = ref$.transitionLeave, transitionEnterTimeout = ref$.transitionEnterTimeout, transitionLeaveTimeout = ref$.transitionLeaveTimeout, uid = ref$.uid;\n      }\n\n      return ReactSelectize(import$(import$({\n        autofocus: autofocus,\n        autosize: autosize,\n        cancelKeyboardEventOnSelection: cancelKeyboardEventOnSelection,\n        className: \"simple-select\" + (!!this.props.className ? \" \" + this.props.className : \"\"),\n        delimiters: delimiters,\n        disabled: disabled,\n        dropdownDirection: dropdownDirection,\n        groupId: groupId,\n        groups: groups,\n        groupsAsColumns: groupsAsColumns,\n        hideResetButton: hideResetButton,\n        highlightedUid: highlightedUid,\n        onHighlightedUidChange: onHighlightedUidChange,\n        inputProps: inputProps,\n        name: name,\n        onBlurResetsInput: onBlurResetsInput,\n        renderGroupTitle: renderGroupTitle,\n        renderResetButton: renderResetButton,\n        renderToggleButton: renderToggleButton,\n        scrollLock: this.state.scrollLock,\n        onScrollLockChange: function onScrollLockChange(scrollLock) {\n          return this$.setState({\n            scrollLock: scrollLock\n          });\n        },\n        tether: tether,\n        tetherProps: tetherProps,\n        theme: theme,\n        transitionEnter: transitionEnter,\n        transitionEnterTimeout: transitionEnterTimeout,\n        transitionLeave: transitionLeave,\n        transitionLeaveTimeout: transitionLeaveTimeout,\n        ref: 'select',\n        anchor: last(values),\n        onAnchorChange: function onAnchorChange(arg$, callback) {\n          return callback();\n        },\n        open: open,\n        onOpenChange: onOpenChange,\n        firstOptionIndexToHighlight: function firstOptionIndexToHighlight() {\n          return this$.firstOptionIndexToHighlight(options, value);\n        },\n        options: options,\n        renderOption: this.props.renderOption,\n        renderNoResultsFound: this.props.renderNoResultsFound,\n        search: search,\n        onSearchChange: function onSearchChange(search, callback) {\n          return _onSearchChange(search, callback);\n        },\n        values: values,\n        onValuesChange: function onValuesChange(newValues, callback) {\n          var newValue, changed;\n\n          if (newValues.length === 0) {\n            return onValueChange(undefined, function () {\n              return callback();\n            });\n          } else {\n            newValue = last(newValues);\n            changed = !isEqualToObject(newValue, value);\n            return function () {\n              return function (callback) {\n                if (changed) {\n                  return onValueChange(newValue, callback);\n                } else {\n                  return callback();\n                }\n              };\n            }()(function () {\n              callback();\n              return onOpenChange(false, function () {});\n            });\n          }\n        },\n        renderValue: function renderValue(item) {\n          if (open && (!!this$.props.editable || search.length > 0)) {\n            return null;\n          } else {\n            return this$.props.renderValue(item);\n          }\n        },\n        onKeyboardSelectionFailed: function onKeyboardSelectionFailed(which) {\n          return _onSearchChange(\"\", function () {\n            return onOpenChange(false, function () {\n              return this$.props.onKeyboardSelectionFailed(which);\n            });\n          });\n        },\n        uid: function uid(item) {\n          return {\n            uid: this$.props.uid(item),\n            open: open,\n            search: search\n          };\n        },\n        serialize: function serialize(items) {\n          return _serialize(items[0]);\n        },\n        onBlur: function onBlur(e) {\n          var onBlurResetsInput;\n          onBlurResetsInput = this$.props.onBlurResetsInput;\n          (function () {\n            return function (callback) {\n              if (search.length > 0 && onBlurResetsInput) {\n                return _onSearchChange(\"\", callback);\n              } else {\n                return callback();\n              }\n            };\n          })()(function () {\n            return this$.props.onBlur({\n              value: value,\n              open: open,\n              originalEvent: e\n            });\n          });\n        },\n        onFocus: function onFocus(e) {\n          this$.props.onFocus({\n            value: value,\n            open: open,\n            originalEvent: e\n          });\n        },\n        onPaste: function () {\n          var ref$;\n\n          switch (false) {\n            case typeof ((ref$ = this.props) != null ? ref$.valueFromPaste : void 8) !== 'undefined':\n              return this.props.onPaste;\n\n            default:\n              return function (e) {\n                var clipboardData, valueFromPaste;\n                clipboardData = e.clipboardData;\n                valueFromPaste = this$.props.valueFromPaste(options, value, clipboardData.getData('text'));\n\n                if (valueFromPaste) {\n                  (function () {\n                    return onValueChange(valueFromPaste, function () {\n                      return _onSearchChange(\"\", function () {\n                        return onOpenChange(false);\n                      });\n                    });\n                  })();\n\n                  return cancelEvent(e);\n                }\n              };\n          }\n        }.call(this),\n        placeholder: this.props.placeholder,\n        style: this.props.style\n      }, function () {\n        switch (false) {\n          case typeof this.props.restoreOnBackspace !== 'function':\n            return {\n              restoreOnBackspace: this.props.restoreOnBackspace\n            };\n\n          default:\n            return {};\n        }\n      }.call(this)), function () {\n        switch (false) {\n          case typeof this.props.renderNoResultsFound !== 'function':\n            return {\n              renderNoResultsFound: function renderNoResultsFound() {\n                return this$.props.renderNoResultsFound(value, search);\n              }\n            };\n\n          default:\n            return {};\n        }\n      }.call(this)));\n    };\n\n    SimpleSelect.prototype.getComputedState = function () {\n      var highlightedUid,\n          open,\n          search,\n          value,\n          values,\n          ref$,\n          onHighlightedUidChange,\n          _onOpenChange,\n          onSearchChange,\n          onValueChange,\n          optionsFromChildren,\n          unfilteredOptions,\n          filteredOptions,\n          newOption,\n          options,\n          this$ = this;\n\n      highlightedUid = this.props.hasOwnProperty('highlightedUid') ? this.props.highlightedUid : this.state.highlightedUid;\n      open = this.isOpen();\n      search = this.props.hasOwnProperty('search') ? this.props.search : this.state.search;\n      value = this.value();\n      values = !!value || value === 0 ? [value] : [];\n      ref$ = map(function (p) {\n        var result;\n        return result = function () {\n          switch (false) {\n            case !(this.props.hasOwnProperty(p) && this.props.hasOwnProperty(camelize(\"on-\" + p + \"-change\"))):\n              return function (o, callback) {\n                this$.props[camelize(\"on-\" + p + \"-change\")](o, function () {});\n                return this$.setState({}, callback);\n              };\n\n            case !(this.props.hasOwnProperty(p) && !this.props.hasOwnProperty(camelize(\"on-\" + p + \"-change\"))):\n              return function (arg$, callback) {\n                return callback();\n              };\n\n            case !(!this.props.hasOwnProperty(p) && this.props.hasOwnProperty(camelize(\"on-\" + p + \"-change\"))):\n              return function (o, callback) {\n                var ref$;\n                return this$.setState((ref$ = {}, ref$[p + \"\"] = o, ref$), function () {\n                  callback();\n                  return this$.props[camelize(\"on-\" + p + \"-change\")](o, function () {});\n                });\n              };\n\n            case !(!this.props.hasOwnProperty(p) && !this.props.hasOwnProperty(camelize(\"on-\" + p + \"-change\"))):\n              return function (o, callback) {\n                var ref$;\n                return this$.setState((ref$ = {}, ref$[p + \"\"] = o, ref$), callback);\n              };\n          }\n        }.call(this$);\n      })(['highlightedUid', 'open', 'search', 'value']), onHighlightedUidChange = ref$[0], _onOpenChange = ref$[1], onSearchChange = ref$[2], onValueChange = ref$[3];\n\n      optionsFromChildren = function () {\n        var ref$;\n\n        switch (false) {\n          case !((ref$ = this.props) != null && ref$.children):\n            return map(function (it) {\n              var ref$, value, children;\n\n              if ((ref$ = it != null ? it.props : void 8) != null) {\n                value = ref$.value, children = ref$.children;\n              }\n\n              return {\n                label: children,\n                value: value\n              };\n            })(toString$.call(this.props.children).slice(8, -1) === 'Array' ? this.props.children : [this.props.children]);\n\n          default:\n            return [];\n        }\n      }.call(this);\n\n      unfilteredOptions = this.props.hasOwnProperty('options') ? (ref$ = this.props.options) != null ? ref$ : [] : optionsFromChildren;\n      filteredOptions = this.props.filterOptions(unfilteredOptions, search);\n\n      newOption = function () {\n        switch (false) {\n          case typeof this.props.createFromSearch !== 'function':\n            return this.props.createFromSearch(filteredOptions, search);\n\n          default:\n            return null;\n        }\n      }.call(this);\n\n      options = (!!newOption ? [(ref$ = import$({}, newOption), ref$.newOption = true, ref$)] : []).concat(filteredOptions);\n      return {\n        highlightedUid: highlightedUid,\n        open: open,\n        search: search,\n        value: value,\n        values: values,\n        onHighlightedUidChange: onHighlightedUidChange,\n        onOpenChange: function onOpenChange(open, callback) {\n          _onOpenChange(open, function () {\n            callback();\n\n            if (!!this$.props.editable && this$.isOpen() && !!value) {\n              return onSearchChange(this$.props.editable(value) + \"\" + (search.length === 1 ? search : ''), function () {\n                return this$.highlightFirstSelectableOption(function () {});\n              });\n            }\n          });\n        },\n        onSearchChange: onSearchChange,\n        onValueChange: onValueChange,\n        filteredOptions: filteredOptions,\n        options: options\n      };\n    };\n\n    SimpleSelect.prototype.firstOptionIndexToHighlight = function (options, value) {\n      var index,\n          optionIndexToHighlight,\n          search,\n          this$ = this;\n      index = !!value ? findIndex(function (it) {\n        return isEqualToObject(it, value);\n      }, options) : undefined;\n\n      optionIndexToHighlight = function () {\n        var ref$;\n\n        switch (false) {\n          case typeof index === 'undefined':\n            return index;\n\n          case options.length !== 1:\n            return 0;\n\n          case typeof ((ref$ = options[0]) != null ? ref$.newOption : void 8) !== 'undefined':\n            return 0;\n\n          default:\n            if (all(function (it) {\n              return typeof it.selectable === 'boolean' && !it.selectable;\n            })(drop(1)(options))) {\n              return 0;\n            } else {\n              return 1;\n            }\n\n        }\n      }();\n\n      search = this.props.hasOwnProperty('search') ? this.props.search : this.state.search;\n      return this.props.firstOptionIndexToHighlight(optionIndexToHighlight, options, value, search);\n    };\n\n    SimpleSelect.prototype.focus = function () {\n      this.refs.select.focus();\n    };\n\n    SimpleSelect.prototype.blur = function () {\n      this.refs.select.blur();\n    };\n\n    SimpleSelect.prototype.highlightFirstSelectableOption = function (callback) {\n      var ref$, options, value;\n      callback == null && (callback = function callback() {});\n\n      if (this.state.open) {\n        ref$ = this.getComputedState(), options = ref$.options, value = ref$.value;\n        this.refs.select.highlightAndScrollToSelectableOption(this.firstOptionIndexToHighlight(options, value), 1, callback);\n      } else {\n        callback();\n      }\n    };\n\n    SimpleSelect.prototype.value = function () {\n      if (this.props.hasOwnProperty('value')) {\n        return this.props.value;\n      } else {\n        return this.state.value;\n      }\n    };\n\n    SimpleSelect.prototype.isOpen = function () {\n      if (this.props.hasOwnProperty('open')) {\n        return this.props.open;\n      } else {\n        return this.state.open;\n      }\n    };\n\n    return SimpleSelect;\n  }(React.Component);\n\n  function extend$(sub, sup) {\n    function fun() {}\n\n    fun.prototype = (sub.superclass = sup).prototype;\n    (sub.prototype = new fun()).constructor = sub;\n    if (typeof sup.extended == 'function') sup.extended(sub);\n    return sub;\n  }\n\n  function import$(obj, src) {\n    var own = {}.hasOwnProperty;\n\n    for (var key in src) {\n      if (own.call(src, key)) obj[key] = src[key];\n    }\n\n    return obj;\n  }\n\n  function curry$(f, bound) {\n    var context,\n        _curry = function _curry(args) {\n      return f.length > 1 ? function () {\n        var params = args ? args.concat() : [];\n        context = bound ? context || this : this;\n        return params.push.apply(params, arguments) < f.length && arguments.length ? _curry.call(context, params) : f.apply(context, params);\n      } : f;\n    };\n\n    return _curry();\n  }\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}