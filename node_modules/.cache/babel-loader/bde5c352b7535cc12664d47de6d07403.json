{"ast":null,"code":"(function () {\n  var ref$,\n      all,\n      any,\n      camelize,\n      difference,\n      drop,\n      filter,\n      find,\n      findIndex,\n      id,\n      last,\n      map,\n      reject,\n      isEqualToObject,\n      React,\n      createFactory,\n      div,\n      img,\n      span,\n      ReactSelectize,\n      cancelEvent,\n      MultiSelect,\n      toString$ = {}.toString;\n  ref$ = require('prelude-ls'), all = ref$.all, any = ref$.any, camelize = ref$.camelize, difference = ref$.difference, drop = ref$.drop, filter = ref$.filter, find = ref$.find, findIndex = ref$.findIndex, id = ref$.id, last = ref$.last, map = ref$.map, reject = ref$.reject;\n  isEqualToObject = require('prelude-extension').isEqualToObject;\n  React = require('react'), createFactory = React.createFactory;\n  ref$ = require('react-dom-factories'), div = ref$.div, img = ref$.img, span = ref$.span;\n  ReactSelectize = createFactory(require('./ReactSelectize'));\n  cancelEvent = require('./utils').cancelEvent;\n\n  module.exports = MultiSelect = function (superclass) {\n    var prototype = extend$((import$(MultiSelect, superclass).displayName = 'MultiSelect', MultiSelect), superclass).prototype,\n        constructor = MultiSelect;\n    MultiSelect.defaultProps = {\n      className: \"\",\n      closeOnSelect: false,\n      defaultValues: [],\n      delimiters: [],\n      filterOptions: curry$(function (options, values, search) {\n        var this$ = this;\n        return filter(function (it) {\n          return it.label.toLowerCase().trim().indexOf(search.toLowerCase().trim()) > -1;\n        })(reject(function (it) {\n          return in$(it.label.trim(), map(function (it) {\n            return it.label.trim();\n          }, values != null ? values : []));\n        })(options));\n      }),\n      firstOptionIndexToHighlight: id,\n      onBlur: function onBlur(e) {},\n      onFocus: function onFocus(e) {},\n      onPaste: function onPaste(e) {\n        true;\n      },\n      serialize: map(function (it) {\n        return it != null ? it.value : void 8;\n      }),\n      tether: false\n    };\n\n    function MultiSelect(props) {\n      MultiSelect.superclass.call(this, props);\n      this.state = {\n        anchor: !!this.props.values ? last(this.props.values) : undefined,\n        highlightedUid: undefined,\n        open: false,\n        scrollLock: false,\n        search: \"\",\n        values: this.props.defaultValues\n      };\n    }\n\n    MultiSelect.prototype.render = function () {\n      var ref$,\n          anchor,\n          filteredOptions,\n          highlightedUid,\n          onAnchorChange,\n          onOpenChange,\n          onHighlightedUidChange,\n          _onSearchChange,\n          _onValuesChange,\n          search,\n          open,\n          options,\n          values,\n          autofocus,\n          autosize,\n          cancelKeyboardEventOnSelection,\n          delimiters,\n          disabled,\n          dropdownDirection,\n          groupId,\n          groups,\n          groupsAsColumns,\n          hideResetButton,\n          inputProps,\n          name,\n          onKeyboardSelectionFailed,\n          renderToggleButton,\n          renderGroupTitle,\n          renderResetButton,\n          serialize,\n          tether,\n          tetherProps,\n          theme,\n          transitionEnter,\n          transitionLeave,\n          transitionEnterTimeout,\n          transitionLeaveTimeout,\n          uid,\n          this$ = this;\n\n      ref$ = this.getComputedState(), anchor = ref$.anchor, filteredOptions = ref$.filteredOptions, highlightedUid = ref$.highlightedUid, onAnchorChange = ref$.onAnchorChange, onOpenChange = ref$.onOpenChange, onHighlightedUidChange = ref$.onHighlightedUidChange, _onSearchChange = ref$.onSearchChange, _onValuesChange = ref$.onValuesChange, search = ref$.search, open = ref$.open, options = ref$.options, values = ref$.values;\n\n      if ((ref$ = this.props) != null) {\n        autofocus = ref$.autofocus, autosize = ref$.autosize, cancelKeyboardEventOnSelection = ref$.cancelKeyboardEventOnSelection, delimiters = ref$.delimiters, disabled = ref$.disabled, dropdownDirection = ref$.dropdownDirection, groupId = ref$.groupId, groups = ref$.groups, groupsAsColumns = ref$.groupsAsColumns, hideResetButton = ref$.hideResetButton, inputProps = ref$.inputProps, name = ref$.name, onKeyboardSelectionFailed = ref$.onKeyboardSelectionFailed, renderToggleButton = ref$.renderToggleButton, renderGroupTitle = ref$.renderGroupTitle, renderResetButton = ref$.renderResetButton, serialize = ref$.serialize, tether = ref$.tether, tetherProps = ref$.tetherProps, theme = ref$.theme, transitionEnter = ref$.transitionEnter, transitionLeave = ref$.transitionLeave, transitionEnterTimeout = ref$.transitionEnterTimeout, transitionLeaveTimeout = ref$.transitionLeaveTimeout, uid = ref$.uid;\n      }\n\n      return ReactSelectize(import$(import$({\n        autofocus: autofocus,\n        autosize: autosize,\n        cancelKeyboardEventOnSelection: cancelKeyboardEventOnSelection,\n        className: \"multi-select \" + this.props.className,\n        delimiters: delimiters,\n        disabled: disabled,\n        dropdownDirection: dropdownDirection,\n        groupId: groupId,\n        groups: groups,\n        groupsAsColumns: groupsAsColumns,\n        hideResetButton: hideResetButton,\n        highlightedUid: highlightedUid,\n        onHighlightedUidChange: onHighlightedUidChange,\n        inputProps: inputProps,\n        name: name,\n        onKeyboardSelectionFailed: onKeyboardSelectionFailed,\n        renderGroupTitle: renderGroupTitle,\n        renderResetButton: renderResetButton,\n        renderToggleButton: renderToggleButton,\n        scrollLock: this.state.scrollLock,\n        onScrollLockChange: function onScrollLockChange(scrollLock) {\n          return this$.setState({\n            scrollLock: scrollLock\n          });\n        },\n        tether: tether,\n        tetherProps: tetherProps,\n        theme: theme,\n        transitionEnter: transitionEnter,\n        transitionEnterTimeout: transitionEnterTimeout,\n        transitionLeave: transitionLeave,\n        transitionLeaveTimeout: transitionLeaveTimeout,\n        uid: uid,\n        ref: 'select',\n        anchor: anchor,\n        onAnchorChange: onAnchorChange,\n        open: open,\n        onOpenChange: onOpenChange,\n        options: options,\n        renderOption: this.props.renderOption,\n        firstOptionIndexToHighlight: function firstOptionIndexToHighlight() {\n          return this$.firstOptionIndexToHighlight(options);\n        },\n        search: search,\n        onSearchChange: function onSearchChange(search, callback) {\n          return _onSearchChange(!!this$.props.maxValues && values.length >= this$.props.maxValues ? \"\" : search, callback);\n        },\n        values: values,\n        onValuesChange: function onValuesChange(newValues, callback) {\n          return _onValuesChange(newValues, function () {\n            callback();\n\n            if (this$.props.closeOnSelect || !!this$.props.maxValues && this$.values().length >= this$.props.maxValues) {\n              return onOpenChange(false, function () {});\n            }\n          });\n        },\n        renderValue: this.props.renderValue,\n        serialize: serialize,\n        onBlur: function onBlur(e) {\n          _onSearchChange(\"\", function () {\n            return this$.props.onBlur({\n              open: open,\n              values: values,\n              originalEvent: e\n            });\n          });\n        },\n        onFocus: function onFocus(e) {\n          this$.props.onFocus({\n            open: open,\n            values: values,\n            originalEvent: e\n          });\n        },\n        onPaste: function () {\n          var ref$;\n\n          switch (false) {\n            case typeof ((ref$ = this.props) != null ? ref$.valuesFromPaste : void 8) !== 'undefined':\n              return this.props.onPaste;\n\n            default:\n              return function (e) {\n                var clipboardData;\n                clipboardData = e.clipboardData;\n\n                (function () {\n                  var newValues;\n                  newValues = values.concat(this$.props.valuesFromPaste(options, values, clipboardData.getData('text')));\n                  return _onValuesChange(newValues, function () {\n                    return onAnchorChange(last(newValues));\n                  });\n                })();\n\n                return cancelEvent(e);\n              };\n          }\n        }.call(this),\n        placeholder: this.props.placeholder,\n        style: this.props.style\n      }, function () {\n        switch (false) {\n          case typeof this.props.restoreOnBackspace !== 'function':\n            return {\n              restoreOnBackspace: this.props.restoreOnBackspace\n            };\n\n          default:\n            return {};\n        }\n      }.call(this)), function () {\n        switch (false) {\n          case typeof this.props.renderNoResultsFound !== 'function':\n            return {\n              renderNoResultsFound: function renderNoResultsFound() {\n                return this$.props.renderNoResultsFound(values, search);\n              }\n            };\n\n          default:\n            return {};\n        }\n      }.call(this)));\n    };\n\n    MultiSelect.prototype.getComputedState = function () {\n      var anchor,\n          highlightedUid,\n          open,\n          search,\n          values,\n          ref$,\n          onAnchorChange,\n          onHighlightedUidChange,\n          _onOpenChange,\n          onSearchChange,\n          onValuesChange,\n          optionsFromChildren,\n          unfilteredOptions,\n          filteredOptions,\n          newOption,\n          options,\n          this$ = this;\n\n      anchor = this.props.hasOwnProperty('anchor') ? this.props.anchor : this.state.anchor;\n      highlightedUid = this.props.hasOwnProperty('highlightedUid') ? this.props.highlightedUid : this.state.highlightedUid;\n      open = this.isOpen();\n      search = this.props.hasOwnProperty('search') ? this.props.search : this.state.search;\n      values = this.values();\n      ref$ = map(function (p) {\n        switch (false) {\n          case !(this$.props.hasOwnProperty(p) && this$.props.hasOwnProperty(camelize(\"on-\" + p + \"-change\"))):\n            return function (o, callback) {\n              this$.props[camelize(\"on-\" + p + \"-change\")](o, function () {});\n              return this$.setState({}, callback);\n            };\n\n          case !(this$.props.hasOwnProperty(p) && !this$.props.hasOwnProperty(camelize(\"on-\" + p + \"-change\"))):\n            return function (arg$, callback) {\n              return callback();\n            };\n\n          case !(!this$.props.hasOwnProperty(p) && this$.props.hasOwnProperty(camelize(\"on-\" + p + \"-change\"))):\n            return function (o, callback) {\n              var ref$;\n              return this$.setState((ref$ = {}, ref$[p + \"\"] = o, ref$), function () {\n                callback();\n                return this$.props[camelize(\"on-\" + p + \"-change\")](o, function () {});\n              });\n            };\n\n          case !(!this$.props.hasOwnProperty(p) && !this$.props.hasOwnProperty(camelize(\"on-\" + p + \"-change\"))):\n            return function (o, callback) {\n              var ref$;\n              return this$.setState((ref$ = {}, ref$[p + \"\"] = o, ref$), callback);\n            };\n        }\n      })(['anchor', 'highlightedUid', 'open', 'search', 'values']), onAnchorChange = ref$[0], onHighlightedUidChange = ref$[1], _onOpenChange = ref$[2], onSearchChange = ref$[3], onValuesChange = ref$[4];\n\n      optionsFromChildren = function () {\n        var ref$;\n\n        switch (false) {\n          case !((ref$ = this.props) != null && ref$.children):\n            return map(function (arg$) {\n              var props, value, children;\n\n              if (arg$ != null) {\n                props = arg$.props;\n              }\n\n              if (props != null) {\n                value = props.value, children = props.children;\n              }\n\n              return {\n                label: children,\n                value: value\n              };\n            })(toString$.call(this.props.children).slice(8, -1) === 'Array' ? this.props.children : [this.props.children]);\n\n          default:\n            return [];\n        }\n      }.call(this);\n\n      unfilteredOptions = this.props.hasOwnProperty('options') ? (ref$ = this.props.options) != null ? ref$ : [] : optionsFromChildren;\n      filteredOptions = this.props.filterOptions(unfilteredOptions, values, search);\n\n      newOption = function () {\n        switch (false) {\n          case typeof this.props.createFromSearch !== 'function':\n            return this.props.createFromSearch(filteredOptions, values, search);\n\n          default:\n            return null;\n        }\n      }.call(this);\n\n      options = (!!newOption ? [(ref$ = import$({}, newOption), ref$.newOption = true, ref$)] : []).concat(filteredOptions);\n      return {\n        anchor: anchor,\n        highlightedUid: highlightedUid,\n        search: search,\n        values: values,\n        onAnchorChange: onAnchorChange,\n        onHighlightedUidChange: onHighlightedUidChange,\n        open: open,\n        onOpenChange: function onOpenChange(open, callback) {\n          _onOpenChange(function () {\n            switch (false) {\n              case !(typeof this.props.maxValues !== 'undefined' && this.values().length >= this.props.maxValues):\n                return false;\n\n              default:\n                return open;\n            }\n          }.call(this$), callback);\n        },\n        onSearchChange: onSearchChange,\n        onValuesChange: onValuesChange,\n        filteredOptions: filteredOptions,\n        options: options\n      };\n    };\n\n    MultiSelect.prototype.firstOptionIndexToHighlight = function (options) {\n      var optionIndexToHighlight, search;\n\n      optionIndexToHighlight = function () {\n        var ref$;\n\n        switch (false) {\n          case options.length !== 1:\n            return 0;\n\n          case typeof ((ref$ = options[0]) != null ? ref$.newOption : void 8) !== 'undefined':\n            return 0;\n\n          default:\n            if (all(function (it) {\n              return typeof it.selectable === 'boolean' && !it.selectable;\n            })(drop(1)(options))) {\n              return 0;\n            } else {\n              return 1;\n            }\n\n        }\n      }();\n\n      search = this.props.hasOwnProperty('search') ? this.props.search : this.state.search;\n      return this.props.firstOptionIndexToHighlight(optionIndexToHighlight, options, this.values(), search);\n    };\n\n    MultiSelect.prototype.focus = function () {\n      this.refs.select.focus();\n    };\n\n    MultiSelect.prototype.blur = function () {\n      this.refs.select.blur();\n    };\n\n    MultiSelect.prototype.highlightFirstSelectableOption = function () {\n      if (this.state.open) {\n        this.refs.select.highlightAndScrollToSelectableOption(this.firstOptionIndexToHighlight(this.getComputedState().options), 1);\n      }\n    };\n\n    MultiSelect.prototype.values = function () {\n      if (this.props.hasOwnProperty('values')) {\n        return this.props.values;\n      } else {\n        return this.state.values;\n      }\n    };\n\n    MultiSelect.prototype.isOpen = function () {\n      if (this.props.hasOwnProperty('open')) {\n        return this.props.open;\n      } else {\n        return this.state.open;\n      }\n    };\n\n    return MultiSelect;\n  }(React.Component);\n\n  function extend$(sub, sup) {\n    function fun() {}\n\n    fun.prototype = (sub.superclass = sup).prototype;\n    (sub.prototype = new fun()).constructor = sub;\n    if (typeof sup.extended == 'function') sup.extended(sub);\n    return sub;\n  }\n\n  function import$(obj, src) {\n    var own = {}.hasOwnProperty;\n\n    for (var key in src) {\n      if (own.call(src, key)) obj[key] = src[key];\n    }\n\n    return obj;\n  }\n\n  function in$(x, xs) {\n    var i = -1,\n        l = xs.length >>> 0;\n\n    while (++i < l) {\n      if (x === xs[i]) return true;\n    }\n\n    return false;\n  }\n\n  function curry$(f, bound) {\n    var context,\n        _curry = function _curry(args) {\n      return f.length > 1 ? function () {\n        var params = args ? args.concat() : [];\n        context = bound ? context || this : this;\n        return params.push.apply(params, arguments) < f.length && arguments.length ? _curry.call(context, params) : f.apply(context, params);\n      } : f;\n    };\n\n    return _curry();\n  }\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}